package com.anelarge.ontology.utils;

import com.anelarge.utils.io.FileUtils;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.util.DefaultPrefixManager;

import java.io.*;
import java.util.*;

/**
 * @author sinan.kordemir
 *         <p/>
 *         This class use owlapi library and creates Ontology according to this
 *         library. This class accepts # character as default prefix manager
 */

public class OntologyUtil
{

	private OWLDataFactory     factory;
	private PrefixManager      pm;
	private OWLOntology        ontology;
	private String             pmString = "#";
	private OWLOntologyManager manager;

	/**
	 * @param ontologyFile
	 *
	 * @throws OWLOntologyCreationException
	 */
	public OntologyUtil(File ontologyFile)
			throws OWLOntologyCreationException
	{
		initializeOntology(ontologyFile);
	}

	/**
	 * @param filePath
	 *
	 * @throws OWLOntologyCreationException
	 */
	public OntologyUtil(String filePath)
			throws OWLOntologyCreationException
	{
		initializeOntology(filePath);
	}

	/**
	 * @param stream
	 *
	 * @throws OWLOntologyCreationException
	 */
	public OntologyUtil(InputStream stream)
			throws OWLOntologyCreationException
	{
		initializeOntology(stream);
	}

	/**
	 * @return
	 */
	public OWLDataFactory getFactory()
	{
		return factory;
	}

	/**
	 * @param factory
	 */
	public void setFactory(OWLDataFactory factory)
	{
		this.factory = factory;
	}

	/**
	 * @return
	 */
	public OWLOntology getOntology()
	{
		return ontology;
	}

	/**
	 * @param ontology
	 */
	public void setOntology(OWLOntology ontology)
	{
		this.ontology = ontology;
	}

	/**
	 * @return
	 */
	public OWLOntologyManager getManager()
	{
		return manager;
	}

	/**
	 * @param manager
	 */
	public void setManager(OWLOntologyManager manager)
	{
		this.manager = manager;
	}

	/**
	 * @param filePath path of the ontology file
	 *
	 * @throws OWLOntologyCreationException
	 */
	private void initializeOntology(String filePath)
			throws OWLOntologyCreationException
	{
		File ontologyFile = new File(filePath);
		manager  = OWLManager.createOWLOntologyManager();
		ontology = manager.loadOntologyFromOntologyDocument(ontologyFile);
		IRI  ontologyIRI  = ontology.getOntologyID().getOntologyIRI();
		pm       = new DefaultPrefixManager(ontologyIRI.toString() + pmString);
		factory  = manager.getOWLDataFactory();

	}

	/**
	 * @param stream input stream of the Ontology File
	 *
	 * @throws OWLOntologyCreationException
	 */
	private void initializeOntology(InputStream stream)
			throws OWLOntologyCreationException
	{
		manager  = OWLManager.createOWLOntologyManager();
		ontology = manager.loadOntologyFromOntologyDocument(stream);
		IRI ontologyIRI = ontology.getOntologyID().getOntologyIRI();
		pm       = new DefaultPrefixManager(ontologyIRI.toString() + pmString);
		factory  = manager.getOWLDataFactory();

	}

	/**
	 * @param ontologyFile
	 *
	 * @throws OWLOntologyCreationException
	 */
	private void initializeOntology(File ontologyFile)
			throws OWLOntologyCreationException
	{
		manager  = OWLManager.createOWLOntologyManager();
		ontology = manager.loadOntologyFromOntologyDocument(ontologyFile);
		IRI ontologyIRI = ontology.getOntologyID().getOntologyIRI();
		pm       = new DefaultPrefixManager(ontologyIRI.toString() + pmString);
		// IRI documentIRI = manager.getOntologyDocumentIRI(ontology);
		factory = manager.getOWLDataFactory();
	}

	/**
	 * @param prop
	 *
	 * @return
	 */
	public OWLObjectProperty getObjectProperty(String prop)
	{
		return factory.getOWLObjectProperty(":" + prop, pm);
	}

	/**
	 * @param prop
	 *
	 * @return
	 */
	public OWLDataProperty getDataProperty(String prop)
	{
		return factory.getOWLDataProperty(":" + prop, pm);
	}

	/**
	 * @param inv  Ontology individual
	 * @param prop Object Property Name
	 *
	 * @return
	 */
	public Set<OWLIndividual> getObjectPropetyValues(OWLIndividual inv, String prop)
	{
		return inv.getObjectPropertyValues(getObjectProperty(prop), ontology);
	}

	/**
	 * @param className Ontology Class name
	 *
	 * @return
	 */
	public OWLClass getClass(String className)
	{
		return factory.getOWLClass(":" + className, pm);
	}

	/**
	 * @param invName
	 *
	 * @return
	 */
	public OWLNamedIndividual getIndividual(String invName)
	{

		return factory.getOWLNamedIndividual(":" + invName, pm);
	}

	/**
	 * @param iri
	 *
	 * @return
	 */
	public OWLClass getOwlClass(IRI iri)
	{
		OWLClass owlClass = factory.getOWLClass(iri);
		return owlClass;
	}

	/**
	 * @param iri
	 *
	 * @return
	 */
	public String getOwlIndClassName(IRI iri)
	{
		OWLClass owlClass = getOwlClass(iri);
		return cleanType(owlClass.toString());
	}

	public String getIndClassName(OWLNamedIndividual ind)
	{
		if (ind != null)
		{
			Set<OWLClassExpression> types = ind.getTypes(ontology);
			for (OWLClassExpression owlClassExpression : types)
			{
				return cleanType(owlClassExpression.toString());
			}
		}
		return null;
	}

	/**
	 * @param propname  Data property Name
	 * @param propvalue Data property value
	 * @param inv       Individual of which data property will add
	 */
	public void addDataProperty(String propname, String propvalue, OWLNamedIndividual inv)
	{
		OWLAxiom axiom = factory.getOWLDataPropertyAssertionAxiom(getDataProperty(propname), inv, propvalue);
		manager.addAxiom(ontology, axiom);
	}

	/**
	 * @param propname  Data property Name
	 * @param propvalue Value of Data Property as boolean
	 * @param inv       Individual of which data property will add
	 */
	public void addDataProperty(String propname, boolean propvalue, OWLNamedIndividual inv)
	{
		OWLAxiom axiom = factory.getOWLDataPropertyAssertionAxiom(getDataProperty(propname), inv, propvalue);
		manager.addAxiom(ontology, axiom);
	}

	/**
	 * @param propname Object property name
	 * @param prop     The property individual which will be added to object
	 * @param obj      The individual which will have the object property
	 */
	public void addObjectProperty(String propname, OWLNamedIndividual prop, OWLNamedIndividual obj)
	{
		OWLObjectPropertyAssertionAxiom axiom = factory
				.getOWLObjectPropertyAssertionAxiom(getObjectProperty(propname), obj, prop);
		manager.addAxiom(ontology, axiom);
	}

	/**
	 * @param invName
	 * @param propName
	 *
	 * @return
	 */
	public String getNamedInvidualDataProperty(String invName, String propName)
	{
		String             result     = null;
		OWLNamedIndividual inv        = getIndividual(invName);
		Set<OWLLiteral>    propvalues = inv.getDataPropertyValues(getDataProperty(propName), this.ontology);
		if (propvalues.size() == 1)
		{
			OWLLiteral propval = (OWLLiteral) propvalues.toArray()[0];
			result = propval.getLiteral();
		}
		return result;
	}

	/**
	 * @param cls
	 * @param invname
	 *
	 * @return
	 */
	public OWLNamedIndividual createInvidual(String cls, String invname)
	{
		OWLNamedIndividual     res   = factory.getOWLNamedIndividual(    ":" + invname, pm);
		manager.addAxiom(ontology, factory.getOWLDeclarationAxiom(res));
		OWLClassAssertionAxiom axiom = factory.getOWLClassAssertionAxiom(getClass(cls), res);
		manager.addAxiom(ontology, axiom);
		return res;
	}

	/**
	 * @param owlNamedIndividual
	 *
	 * @return HashMap of data properties
	 */
	public HashMap<String, String> getDataProperties(OWLNamedIndividual owlNamedIndividual)
	{
		HashMap<String, String>                         dataProperties     = new HashMap<String, String>();
		Map<OWLDataPropertyExpression, Set<OWLLiteral>> dataPropertyValues = owlNamedIndividual
				.getDataPropertyValues(ontology);
		Set<OWLDataPropertyExpression>                  keySet             = dataPropertyValues.keySet();
		for (OWLDataPropertyExpression owlDataPropertyExpression : keySet)
		{
			Set<OWLLiteral> set = dataPropertyValues.get(owlDataPropertyExpression);
			for (OWLLiteral owlLiteral : set)
			{
				String cleanDataType = cleanType(owlDataPropertyExpression.toString());
				dataProperties.put(cleanDataType, owlLiteral.getLiteral());
			}
		}
		return dataProperties;
	}

	/**
	 * A data property can be have multiple values Eg : address = 1.1.1.1 ,
	 * address = HHAA856:34H so address property will have 2 values And this
	 * method returns all the list as HashMap
	 *
	 * @param owlNamedIndividual
	 *
	 * @return HashMap of data properties
	 */
	public HashMap<String, List<String>> getDataPropertiesWithList(OWLNamedIndividual owlNamedIndividual)
	{
		HashMap<String, List<String>>                   dataProperties     = new HashMap<String, List<String>>();
		Map<OWLDataPropertyExpression, Set<OWLLiteral>> dataPropertyValues = owlNamedIndividual
				.getDataPropertyValues(ontology);
		Set<OWLDataPropertyExpression>                  keySet             = dataPropertyValues.keySet();
		for (OWLDataPropertyExpression owlDataPropertyExpression : keySet)
		{
			Set<OWLLiteral> set  = dataPropertyValues.get(owlDataPropertyExpression);
			List<String>    list = new ArrayList<String>();
			for (OWLLiteral owlLiteral : set)
			{
				String cleanDataType = cleanType(owlDataPropertyExpression.toString());
				list.add(owlLiteral.getLiteral());
				dataProperties.put(cleanDataType, list);
			}
		}
		return dataProperties;
	}

	/**
	 * This method returns all of the individuals and puts them to a HashMap
	 * according to Ontology_Class names
	 *
	 * @param owlNamedIndividual
	 *
	 * @return HashMap of Individual List
	 */
	public HashMap<String, List<OWLNamedIndividual>> getObjectProperties(OWLNamedIndividual owlNamedIndividual)
	{

		HashMap<String, List<OWLNamedIndividual>> individualMap                 = new HashMap<String, List<OWLNamedIndividual>>();
		Set<OWLObjectPropertyAssertionAxiom>      objectPropertyAssertionAxioms = ontology
				.getObjectPropertyAssertionAxioms(owlNamedIndividual);
		for (OWLObjectPropertyAssertionAxiom owlObjectPropertyAssertionAxiom : objectPropertyAssertionAxioms)
		{
			OWLNamedIndividual       to           = (OWLNamedIndividual) owlObjectPropertyAssertionAxiom.getObject();
			String                   cleanIndType = cleanIndType(to);
			List<OWLNamedIndividual> list         = individualMap.get(cleanIndType);
			if (list == null)
			{
				list = new ArrayList<OWLNamedIndividual>();
				individualMap.put(cleanIndType, list);
			}
			if (checkIndividual(to, list) == false)
			{
				list.add(to);
			}
		}
		return individualMap;
	}

	/**
	 * @param ind
	 * @param list
	 *
	 * @return
	 */
	public boolean checkIndividual(OWLNamedIndividual ind, List<OWLNamedIndividual> list)
	{
		for (OWLNamedIndividual owlNamedIndividual : list)
		{
			if (owlNamedIndividual.equals(ind))
			{
				return true;
			}
		}
		return false;
	}

	/**
	 * @param expression
	 *
	 * @return
	 */
	public String cleanType(String expression)
	{
		String string  = expression.toString();
		int    indexOf = string.indexOf(pmString);
		string = string.substring(indexOf + 1, string.length() - 1);
		return string;
	}

	/**
	 * This method finds the class name of the given individual
	 *
	 * @param ind
	 *
	 * @return indivualName as String
	 */
	public String cleanIndType(OWLNamedIndividual ind)
	{
		String                  cleanType = null;
		Set<OWLClassExpression> types     = ind.getTypes(ontology);
		for (OWLClassExpression owlClassExpression : types)
		{
			cleanType = cleanType(owlClassExpression.toString());
			break;
		}
		return cleanType;
	}

	/**
	 * This method returns the List of individuals according to given
	 * Ontology_Class name
	 *
	 * @param className
	 *
	 * @return List of OWLNamedIndividual
	 */
	public List<OWLNamedIndividual> getIndividualsByClassName(String className)
	{
		List<OWLNamedIndividual> indList                = new ArrayList<OWLNamedIndividual>();
		Set<OWLNamedIndividual>  individualsInSignature = ontology.getIndividualsInSignature();
		for (OWLNamedIndividual owlNamedIndividual : individualsInSignature)
		{
			Set<OWLClassExpression> types = owlNamedIndividual.getTypes(ontology);
			for (OWLClassExpression owlClassExpression : types)
			{
				if (className.equals(cleanType(owlClassExpression.toString())))
				{
					indList.add(owlNamedIndividual);
					break;
				}
			}
		}
		return indList;
	}

	/**
	 * This method returns all the object properties in the ontology with their
	 * domain and ranges
	 *
	 * @return List of Object properties
	 */
	public List<ObjectProperty> getObjectProperties()
	{
		List<ObjectProperty> properties = new ArrayList<ObjectProperty>();

		Set<OWLObjectProperty> objectPropertiesInSignature = ontology.getObjectPropertiesInSignature();
		for (OWLObjectProperty owlObjectProperty : objectPropertiesInSignature)
		{
			ObjectProperty          property = new ObjectProperty();
			property.setName(cleanType(owlObjectProperty.toString()));
			Set<OWLClassExpression> ranges2  = owlObjectProperty.getRanges(ontology);
			for (OWLClassExpression owlClassExpression : ranges2)
			{
				String cleanType = cleanType(owlClassExpression.toString());
				if (!property.getRanges().contains(cleanType))
				{
					property.getRanges().add(cleanType(owlClassExpression.toString()));
				}
			}
			Set<OWLClassExpression> domains2 = owlObjectProperty.getDomains(ontology);
			for (OWLClassExpression owlClassExpression : domains2)
			{
				Set<OWLClass> classesInSignature = owlClassExpression.getClassesInSignature();
				for (OWLClass owlClass : classesInSignature)
				{
					Set<OWLClassExpression> subClasses = owlClass.getSubClasses(ontology);
					for (OWLClassExpression owlClassExpression2 : subClasses)
					{
						String cleanType = cleanType(owlClassExpression2.toString());
						if (!property.getRanges().contains(cleanType))
						{
							property.getDomains().add(cleanType(owlClassExpression2.toString()));
						}
					}
					String cleanType = cleanType(owlClassExpression.toString());
					if (!property.getDomains().contains(cleanType))
					{
						property.getDomains().add(cleanType(owlClassExpression.toString()));
					}
				}
			}
			properties.add(property);
		}
		return properties;
	}

	/**
	 * This method prints ontology to screen
	 *
	 * @throws OWLOntologyStorageException
	 */
	public void printOntology()
			throws OWLOntologyStorageException
	{
		manager.saveOntology(ontology, new PrintStream(System.out));
	}

	/**
	 * This method flushes ontology to the given output stream
	 *
	 * @param stream
	 *
	 * @throws OWLOntologyStorageException
	 */
	public void saveOntology(OutputStream stream)
			throws OWLOntologyStorageException
	{
		manager.saveOntology(ontology, stream);
	}

	/**
	 * This method flushes ontology to the given output file
	 *
	 * @param stream
	 *
	 * @throws OWLOntologyStorageException
	 */
	public void saveOntology(String fileName)
			throws OWLOntologyStorageException, IOException
	{
		FileUtils.mkdirs(fileName);
		try (FileOutputStream out = new FileOutputStream(fileName))
		{
			manager.saveOntology(ontology, out);
		}
	}
}
